datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  comment String
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String    @unique
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  selection     Int?
  score         Int       @default(0)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  Post Post[]
  @@map("users")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//   @@unique([identifier, token])
//   @@map("verificationtokens")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String    @unique
//   createdAt     DateTime  @default(now()) @map("created_at")
//   updatedAt     DateTime  @updatedAt @map("updated_at")
//   selection     String?
//   selections    Selection[]
//   score         Int?
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   username      String?
//   calculated    Boolean   @default(false)
//   accounts      Account[]
//   sessions      Session[]

//   @@map("users")
// }

// model Selection {
//   id            String    @id @default(cuid())
//   userId        String
//   user          User      @relation(fields: [userId], references: [id])
//   gameweek      Int
//   selection     Team      @relation(fields: [selectionId], references: [id])
//   selectionId   String
//   calculated    Boolean   @default(false)
//   result        Result?
// }

// enum Result {
//   WIN
//   LOSS
//   DRAW
// }

// model Team {
//   id             String  @id @default(cuid())
//   name           String
//   shortName      String
//   primaryColor   String?
//   secondaryColor String?
//   selections     Selection[]
//   order          Int?
// }
